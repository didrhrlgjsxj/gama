프로젝트 동작 방식 개요
========================

이 문서는 현재 리포지토리의 게임 로직이 어떤 구조와 알고리즘으로 동작하는지
정리한 메모입니다. 코드가 변경되면 이 문서 역시 함께 갱신하여 최신 내용을
유지합니다. 내용 보충이나 수정은 자유롭게 `//` 주석 형태로 적어 둘 수
있습니다.
//이거 모든 src 에 속하는 파일에 대해서 추가해.
1. 네모(Nemo) 객체 정의
-----------------------
- **주요 속성**
  - 위치(`x`, `y`), 방향(`angle`), 크기(`size`), 속도(`speed`), 체력(`hp`) 등
  - `team` 값에 따라 파란색과 빨간색으로 구분됩니다.
  - 쉴드 관련 값(`shieldHp`, `shieldMaxHp`, `shieldStrength`)을 유지하며,
    공격을 받으면 먼저 쉴드가 감소합니다.
  - 이동 목표(`destination`), 공격 명령 상태(`attackMove`, `attackTargets`,
    `attackMovePos`) 등을 보유합니다.
  - 사망 여부는 `dead` 플래그로 관리합니다.
- **생성 방법**
  - `createOffscreen`과 `createShieldCanvas`를 통해 오프스크린 캔버스를
    만들어 이미지 렌더링 비용을 줄입니다.
  - 생성 시 원하는 플랫폼 타입 배열(`platformTypes`)을 넘기면 해당하는
    `MovePlatform` 또는 `AttackPlatform` 인스턴스들을 내부에 만듭니다.
- **업데이트 과정**
  - 가장 가까운 적을 탐색하여 일정 범위 내에 있으면 `attackMove` 상태로
    전환하고, 사정거리에 들어가면 정지 후 공격합니다.
    - 이때 모든 공격 플랫폼이 적에 닿을 수 있는 최소 거리에 소폭의 버퍼(현재 5)를 적용해 멈추는 거리를 계산합니다.
  - `MovePlatform`의 위치나 사용자가 지정한 `destination`에 따라 네모의
    위치가 이동합니다.
  - 각 플랫폼의 `update`를 호출하여 플랫폼 자체의 모션과 공격 로직을
    수행합니다.
  - 체력이 0 이하가 되면 `destroyed()`가 호출되어 사망 처리됩니다.

2. 무브(Move) 플랫폼
--------------------
- `Platform` 클래스를 상속한 이동 전담 모듈입니다.
- 네모와 일정 거리(`baseDistance`)를 유지하며 입력이나 목적지에 따라
  움직입니다. 플랫폼이 네모에게서 일정 이상 멀어지면 네모를 끌고 이동하도록
  `moveVector` 값을 계산합니다.
- 사용자가 우클릭 드래그로 영역을 지정하면, 네모들은 해당 영역에
  분포하도록 각자의 `destination`을 설정합니다.
- 플랫폼이 원위치로 돌아오면 `mode`가 `idle`로 바뀌어 이동력이 사라집니다.

3. 어택(Attack) 플랫폼
----------------------
- `Platform`을 상속하며, 총구 위치 계산과 사격 처리 기능을 추가합니다.
- `onHand` 여부에 따라 네모의 손에 들린 무기(단일 플랫폼) 또는
  일정 각도로 배치된 고정 무기(다중 플랫폼)로 동작합니다.
- 매 프레임 `nearestEnemy`의 위치를 추적하여 조준 각도를 맞추고,
  사정거리(`attackRange`) 안에 들어오면 `attackSpeed`에 맞춰 피해를 줍니다.
- 발사 시 `MuzzleFlash`와 `HitEffect` 이펙트를 생성하여 시각 효과를
  부여합니다.

4. NemoSquadManager
-------------------
- 일정 거리 이내의 네모들을 자동으로 묶어 "스쿼드" 단위로 관리합니다.
- 스쿼드의 경계 박스가 너무 커지면 내부 네모를 분리하여 여러 스쿼드로
  나누어 줍니다. 선택된 스쿼드는 반투명 사각형으로 강조됩니다.

5. 메인 루프(`src/main.js`)
---------------------------
- `gameLoop`에서 카메라 이동, 캔버스 클리어, 네모 업데이트, 충돌 해소,
  그림 그리기를 순서대로 실행합니다.
- 마우스와 키보드 이벤트를 통해 생성, 이동, 공격 명령을 처리합니다.
- `MoveIndicator`를 사용하여 이동 명령 지점을 잠시 시각화합니다.

비효율적일 수 있는 부분
-----------------------
- 네모끼리의 충돌 해결(`resolveCollisions`)은 모든 쌍을 검사하므로
  네모 수가 많아지면 성능이 떨어질 수 있습니다. 공간 분할 구조(예: 쿼드트리)
  도입을 고려해 볼 수 있습니다.
- 적 탐색 역시 전수 비교로 동작합니다. 스쿼드 단위 또는 그리드 단위로
  근접한 적만 검사하도록 개선하면 좋습니다.
- 오브젝트 생성 시 `offscreen` 캔버스를 캐싱하고 있으나, 많은 색상이나
  종류가 추가되면 캐시 관리가 필요할 수 있습니다.

수정 및 사용 방법
----------------
- 코드 변경 후 이 문서를 같이 업데이트하여 현재 동작 방식을 기록합니다.
- 변수 값을 조정하거나 기능을 추가할 경우 `//` 로 메모를 남기면 이후
  작업 시 참고하기 쉽습니다.
// 최근 수정: 이펙트 강도를 높이기 위해 HitEffect, ShatterEffect,
// MuzzleFlash, MoveIndicator의 기본 값들을 조정했습니다.
// 최근 수정2: 광물 자원과 일꾼, 저장고 빌딩 로직을 추가했습니다.
// 최근 수정3: Worker.js 내용을 Nemo.js에 통합하여 Worker 클래스를 함께 내보내도록 변경했습니다.
<<<<<<< ours
// 최근 수정4: 저장고 크기를 2x2 그리드로 조정하고 일꾼 A의 채굴 명령 및 채굴 이펙트를 추가했습니다.
=======
// 최근 수정4: Worker에게 체력과 피격/사망 로직을 추가하고, B 일꾼의 빌드 메뉴에서
// 건물을 고스트 형태로 배치해 그리드에 맞춰 건설하도록 개선했습니다.
>>>>>>> theirs

